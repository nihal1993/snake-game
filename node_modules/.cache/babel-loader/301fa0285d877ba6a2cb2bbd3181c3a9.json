{"ast":null,"code":"import _defineProperty from \"/Users/nihaljaimini/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/nihaljaimini/Desktop/my-app/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\n\nconst getRandomCordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor(min + (max - min) * Math.random());\n  let y = Math.floor(min + (max - min) * Math.random());\n  return [x, y];\n};\n\nconst initialState = {\n  speed: 150,\n  food: getRandomCordinates(),\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [2, 0]]\n};\n\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 37:\n          this.setState({\n            direction: 'LEFT'\n          });\n          break;\n\n        case 38:\n          this.setState({\n            direction: 'TOP'\n          });\n          break;\n\n        case 39:\n          this.setState({\n            direction: 'RIGHT'\n          });\n          break;\n\n        case 40:\n          this.setState({\n            direction: 'DOWN'\n          });\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n\n        case 'TOP':\n          head = [head[0], head[1] - 2];\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        snakeDots: dots\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.snakeCollapsed();\n    this.snakeEatingFood();\n    this.checkBorder();\n  }\n\n  checkBorder() {\n    let border = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (border[0] > 100 || border[1] > 100 || border[0] < 0 || border[1] < 0) {\n      this.gameOver();\n    }\n  }\n\n  gameOver() {\n    alert(\"game over\", this.state.snakeDots.length - 1);\n    this.setState(initialState);\n  }\n\n  snakeCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dots => {\n      if (dots[0] == head[0] && dots[1] == head[1]) {\n        this.gameOver();\n      }\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n    let food = this.state.food;\n\n    if (head[0] === food[0] && head[1] === food[1]) {\n      let newState = _objectSpread({}, this.state);\n\n      newState.food = getRandomCoordinates();\n      newState.snakeBlocks = this.enlargeSnake();\n      newState.speed = this.increaseSpeed();\n      this.setState(newState);\n      this.speed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeBlocks];\n    newSnake.unshift([]);\n    return newSnake;\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 50) {\n      return this.state.speed - 10;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Snake, {\n      snakeDots: this.state.snakeDots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(Food, {\n      dot: this.state.food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nihaljaimini/Desktop/my-app/src/App.js"],"names":["React","Component","Snake","Food","getRandomCordinates","min","max","x","Math","floor","random","y","initialState","speed","food","direction","snakeDots","App","constructor","props","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","state","head","length","push","shift","componentDidMount","setInterval","document","onkeydown","componentDidUpdate","snakeCollapsed","snakeEatingFood","checkBorder","border","gameOver","alert","snake","pop","forEach","checkIfEat","snakeBlocks","newState","getRandomCoordinates","enlargeSnake","increaseSpeed","newSnake","unshift","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\n\n\n\nconst getRandomCordinates = () => {\n      let min = 1 ;\n      let max = 98 ;\n      let x = Math.floor(min + (max - min) * Math.random());\n      let y = Math.floor(min + (max - min) * Math.random());\n      \n      return [x,y]\n  }\n  \nconst initialState  = {\n     speed:150,\n     food: getRandomCordinates(),\n     direction:'RIGHT',\n     snakeDots: [\n      [0,0],\n      [2,0]\n     ]\n}  \n\nclass App extends Component {\n\nconstructor(props) {\n    super();\n    this.state = initialState;\n  }\n  \n\n  componentDidMount() {\n    setInterval(this.moveSnake,this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate(){\n    this.snakeCollapsed();\n    this.snakeEatingFood();\n    this.checkBorder();\n  }\n\n  onKeyDown = (e) => {\n    e=e ||window.event;\n    switch(e.keyCode){\n      case 37:\n      this.setState({direction:'LEFT'});\n      break;\n      case 38:\n      this.setState({direction:'TOP'});\n      break;\n      case 39:\n      this.setState({direction:'RIGHT'});\n      break;\n      case 40:\n      this.setState({direction:'DOWN'});\n      break;\n\n    }\n  }\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch(this.state.direction){\n      case 'RIGHT':\n      head = [head[0]+2,head[1]];\n      break;\n      case 'LEFT':\n      head = [head[0]-2,head[1]];\n      break;\n      case 'TOP':\n      head = [head[0],head[1]-2];\n      break;\n      case 'DOWN':\n      head = [head[0],head[1]+2];\n      break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots:dots\n    })\n\n  }\n\n  checkBorder(){\n    let border = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if(border[0]>100|| border[1]>100 || border[0]< 0 || border[1] < 0){\n      this.gameOver();\n    }\n\n  }\n\n  gameOver(){\n    alert(\"game over\", this.state.snakeDots.length-1);\n    this.setState(initialState);\n    \n  }\n\n  snakeCollapsed(){\n    let snake = [...this.state.snakeDots];\n    let head  = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dots =>{\n        if(dots[0] == head[0] && dots[1] == head[1])\n        {\n          this.gameOver();\n        }\n    })\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      let newState = { ...this.state };\n      newState.food = getRandomCoordinates();\n      newState.snakeBlocks = this.enlargeSnake();\n      newState.speed = this.increaseSpeed();\n      this.setState(newState);\n      this.speed();\n    }\n  }\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeBlocks];\n    newSnake.unshift([]);\n    return newSnake;\n  }\n  increaseSpeed() {\n    if (this.state.speed > 50) {\n      return this.state.speed - 10;\n    }\n  }\n\n  render() {\n        return(\n          <div className=\"game-area\">\n            <Snake snakeDots={this.state.snakeDots} />\n            <Food dot={this.state.food} />\n          </div> \n      );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}