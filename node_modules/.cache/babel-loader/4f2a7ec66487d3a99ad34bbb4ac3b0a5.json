{"ast":null,"code":"var _jsxFileName = \"/Users/nihaljaimini/Desktop/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [2, 0]]\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          this.setState({\n            direction: 'UP'\n          });\n          break;\n\n        case 40:\n          this.setState({\n            direction: 'DOWN'\n          });\n          break;\n\n        case 37:\n          this.setState({\n            direction: 'LEFT'\n          });\n          break;\n\n        case 39:\n          this.setState({\n            direction: 'RIGHT'\n          });\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          break;\n\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        snakeDots: dots\n      });\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      });\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      });\n    }\n  }\n\n  onGameOver() {\n    alert(\"Game Over. Snake length is \".concat(this.state.snakeDots.length));\n    this.setState(initialState);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Snake, {\n      snakeDots: this.state.snakeDots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(Food, {\n      dot: this.state.food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nihaljaimini/Desktop/my-app/src/App.js"],"names":["React","Component","Snake","Food","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","food","speed","direction","snakeDots","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","componentDidMount","setInterval","document","onkeydown","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","dot","enlargeSnake","increaseSpeed","newSnake","unshift","alert","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [\n    [0,0],\n    [2,0]\n  ]\n}\n\nclass App extends Component {\n\n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      case 37:\n        this.setState({direction: 'LEFT'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n    }\n  }\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    })\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      }\n    })\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([])\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      })\n    }\n  }\n\n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n    this.setState(initialState)\n  }\n\n  render() {\n    return (\n      <div className=\"game-area\">\n        <Snake snakeDots={this.state.snakeDots}/>\n        <Food dot={this.state.food}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}